# Documentación - Semana 1: Configuración del entorno y APIs

## Tecnologías utilizadas
Durante esta primera semana del proyecto se han instalado y configurado los siguientes servicios y herramientas:

- **Docker** y **Docker Compose** para orquestar los servicios.
- **MongoDB**, **Cassandra**, **Neo4j** como bases de datos distribuidas.
- **Kafka** y **Zookeeper** para la ingesta de datos en tiempo real.
- **MongoDB Compass** para visualizar los datos almacenados en Mongo.
- **Python** para realizar las conexiones con APIs y procesamiento inicial.

## Capturas de pantalla
*Se incluirán en el documento final las siguientes capturas:*

1. Contenedores Docker corriendo correctamente (`docker ps`).
2. Interfaz de MongoDB Compass mostrando los datos de:
   - RAWG (`videojuegos.juegos_rawg`)
   - Wikidata (`anime.wikidata`)
   - TMDb (`anime.tmdb`)

## Scripts utilizados

### RAWG + MongoDB
```python
import requests
import json
from pymongo import MongoClient

API_KEY = "TU_API_KEY"
url = f"https://api.rawg.io/api/games?key={API_KEY}"
response = requests.get(url)
data = response.json()

with open("data/juegos_rawg.json", "w", encoding="utf-8") as f:
    json.dump(data, f, indent=4)

client = MongoClient("mongodb://localhost:27017/")
db = client["videojuegos"]
coleccion = db["juegos_rawg"]
coleccion.insert_many(data["results"])
```

### Wikidata + MongoDB
```python
import requests
import json
from pymongo import MongoClient

query = """
SELECT ?anime ?animeLabel ?fecha ?autorLabel WHERE {
  ?anime wdt:P31 wd:Q5398426.
  OPTIONAL { ?anime wdt:P577 ?fecha. }
  OPTIONAL { ?anime wdt:P50 ?autor. }
  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],es\". }
}
LIMIT 50
"""

url = "https://query.wikidata.org/sparql"
headers = {"Accept": "application/sparql-results+json"}
response = requests.get(url, params={"query": query}, headers=headers)
data = response.json()

with open("data/anime_wikidata.json", "w", encoding="utf-8") as f:
    json.dump(data, f, ensure_ascii=False, indent=4)

documentos = data["results"]["bindings"]
client = MongoClient("mongodb://localhost:27017/")
db = client["anime"]
coleccion = db["wikidata"]
coleccion.insert_many(documentos)
```

### TMDb + MongoDB
```python
import requests
import json
from pymongo import MongoClient

API_KEY = "TU_API_KEY"
url = f"https://api.themoviedb.org/3/discover/tv?api_key={API_KEY}&language=es-ES&page=1"
response = requests.get(url)
data = response.json()

with open("data/anime_tmdb.json", "w", encoding="utf-8") as f:
    json.dump(data, f, ensure_ascii=False, indent=4)

if "results" in data:
    client = MongoClient("mongodb://localhost:27017/")
    db = client["anime"]
    coleccion = db["tmdb"]
    coleccion.insert_many(data["results"])
```

## Dificultades encontradas
- **Error `NameError: 'data' is not defined`**: se produjo por usar la variable `data` antes de asignarle el resultado de la API. Solucionado ordenando correctamente el flujo del script.
- **Sin resultados en la API de TMDb**: debido a filtros demasiado restrictivos. Se solucionó eliminando el filtro por género para validar primero el acceso general a los datos.
- **Estructura de YAML mal formateada** en `docker-compose.yml`: corregido ajustando los `ports:` a una lista con guiones.

---

**Semana 1 completada con éxito.** Listo para continuar con la Semana 2: integración de bases de datos y primeros flujos con Kafka/NiFi.

